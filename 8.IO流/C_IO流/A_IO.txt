IO流的分类：
 * 		流向：
 * 			输入流	读取数据
 * 			输出流 写出数据
 * 		数据类型：
 * 			字节流
 * 				字节输入流	读取数据	InputStream
 * 				字节输出流	写出数据	OutputStream
 * 			字符流
 * 				字符输入流	读取数据	Reader
 * 				字符输出流	写出数据	Writer
 * 
 * 		注意：一般我们在探讨IO流的时候，如果没有明确说明按哪种分类来说，默认情况下是按照数据类型来分的。
 
 
	字节输出流操作步骤：
 * 		A:创建字节输出流对象
 * 		B:写数据
 * 		C:释放资源
 
	字节输入流操作步骤：
 * 		A:创建字节输入流对象
 * 		B:调用read()方法读取数据，并把数据显示在控制台
 * 		C:释放资源
 
	复制文本文件。
 * 
 * 	数据源：从哪里来
 * 		a.txt	--	读取数据	--	FileInputStream	
 * 
 * 	目的地：到哪里去
 *		b.txt	--	写数据		--	FileOutputStream
 
 
	通过定义数组的方式确实比以前一次读取一个字节的方式快很多，所以，看来有一个缓冲区还是非常好的。
 * 	既然是这样的话，那么，java开始在设计的时候，它也考虑到了这个问题，就专门提供了带缓冲区的字节类。
 * 	这种类被称为：缓冲区类(高效类)
 * 	写数据：BufferedOutputStream
 * 	读数据：BufferedInputStream
 * 
 * 	构造方法可以指定缓冲区的大小，但是我们一般用不上，因为默认缓冲区大小就足够了。
 
 
 
	字符缓冲流的特殊方法：
 * 		BufferedWriter:
 * 			public void newLine():根据系统来决定换行符
 * 		BufferedReader:
 * 			public String readLine()：一次读取一行数据
 * 			包含该行内容的字符串，不包含任何行终止符，如果已到达流末尾，则返回 null