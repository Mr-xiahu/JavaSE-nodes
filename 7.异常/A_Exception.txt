异常：程序出现了不正常的情况。
   
   举例：今天天气很好，班长出去旅游。骑着自行车，去山里面呼吸新鲜空气。
   		问题1：山路塌陷了，班长及时停住了，但是过不去了。严重的问题。
   		问题2：班长出门推自行车，发现气没了，把气吹起来。出发前就应该检查的问题。
   		问题3:班长骑着车在山路上惬意的行驶着，山路两边是有小石子的，中间是平坦的水泥路。
   			一直在平坦的水泥路上行驶是没有任何问题的，但是呢，他偏偏喜欢骑到小石子上，结果爆胎了。旅游的过程中出现的问题。
   			no zuo no die。
   
   程序的异常：Throwable
   		严重问题：Error 我们不处理。这种问题一般都是很严重的，比如说内存溢出。
   		问题：Exception
   			编译期问题:不是RuntimeException的异常 必须进行处理的，因为你不处理，编译就不能通过。
   			运行期问题:RuntimeException	这种问题我们也不处理，因为是你的问题，而且这个问题出现肯定是我们的代码不够严谨，需要修正代码的。
			
	异常注意事项:
 * 		A:子类重写父类方法时，子类的方法必须抛出相同的异常或父类异常的子类。(父亲坏了,儿子不能比父亲更坏)
 * 		B:如果父类抛出了多个异常,子类重写父类时,只能抛出相同的异常或者是他的子集,子类不能抛出父类没有的异常
 * 		C:如果被重写的方法没有异常抛出,那么子类的方法绝对不可以抛出异常,如果子类方法内有异常发生,那么子类只能try,不能throws
 
 如何处理异常?
	A:try...catch...finally
	
		try...catch...finally的处理格式：
   		try {
   			可能出现问题的代码;
   		}catch(异常名 变量) {
   			针对问题的处理;
   		}finally {
   			释放资源;
   		}
   
   		变形格式：
   		try {
   			可能出现问题的代码;
   		}catch(异常名 变量) {
   			针对问题的处理;
   		}
   
   		注意：
   			A:try里面的代码越少越好
   			B:catch里面必须有内容，哪怕是给出一个简单的提示
 
 
		一个异常
   		二个异常的处理
   		a:每一个写一个try...catch
   		b:写一个try，多个catch
   			try{
   				...
   			}catch(异常类名 变量名) {
   				...
   			}
   			catch(异常类名 变量名) {
   				...
   			}
   			...
   
   			注意事项：
   				1:能明确的尽量明确，不要用大的来处理。
   				2:平级关系的异常谁前谁后无所谓，如果出现了子父关系，父必须在后面。
   
   			注意：
   				一旦try里面出了问题，就会在这里把问题给抛出去，然后和catch里面的问题进行匹配，
   				一旦有匹配的，就执行catch里面的处理，然后结束了try...catch,继续执行后面的语句。
 
		
		 JDK7出现了一个新的异常处理方案：
   			try{
   
   			}catch(异常名1 | 异常名2 | ...  变量 ) {
   					...
   			}
   
   			注意：这个方法虽然简洁，但是也不够好。
   				A:处理方式是一致的。(实际开发中，好多时候可能就是针对同类型的问题，给出同一个处理)
  				B:多个异常间必须是平级关系。
  
 
 
   	B:throws 抛出
		throw:如果出现了异常情况，我们可以把该异常抛出，这个时候的抛出的应该是异常的对象。
   
   		throws和throw的区别(面试题)
			throws
				用在方法声明后面，跟的是异常类名
				可以跟多个异常类名，用逗号隔开
				表示抛出异常，由该方法的调用者来处理
				throws表示出现异常的一种可能性，并不一定会发生这些异常
			throw
				用在方法体内，跟的是异常对象名
				只能抛出一个异常对象名
				表示抛出异常，由方法体内的语句处理
				throw则是抛出了异常，执行throw则一定抛出了某种异常
	
	
	
	面试题：
   		1:final,finally和finalize的区别
   			final：最终的意思，可以修饰类，成员变量，成员方法
   				修饰类，类不能被继承
   				修饰变量，变量是常量
   				修饰方法，方法不能被重写
   			finally：是异常处理的一部分，用于释放资源。
   				一般来说，代码肯定会执行，特殊情况：在执行到finally之前jvm退出了
   			finalize：是Object类的一个方法，用于垃圾回收
   
 面试题：
   1:final,finally和finalize的区别
   final：最终的意思，可以修饰类，成员变量，成员方法
   		修饰类，类不能被继承
   		修饰变量，变量是常量
   		修饰方法，方法不能被重写
   finally：是异常处理的一部分，用于释放资源。
   		一般来说，代码肯定会执行，特殊情况：在执行到finally之前jvm退出了
   finalize：是Object类的一个方法，用于垃圾回收
   
   2:如果catch里面有return语句，请问finally里面的代码还会执行吗?
     如果会，请问是在return前，还是return后。
   	   会。前。
   
   	 准确的说，应该是在中间。
   
   3:try...catch...finally的格式变形
   		A:try...catch...finally
   		B:try...catch
   		C:try...catch...catch...
   		D:try...catch...catch...finally
   		E:try...finally
   			这种做法的目前是为了释放资源。		2:如果catch里面有return语句，请问finally里面的代码还会执行吗?
     		如果会，请问是在return前，还是return后。
   	   		会。前。
   
   	 		准确的说，应该是在中间。
   
   3:try...catch...finally的格式变形
   		A:try...catch...finally
   		B:try...catch
   		C:try...catch...catch...
   		D:try...catch...catch...finally
   		E:try...finally
   			这种做法的目前是为了释放资源。
   
   