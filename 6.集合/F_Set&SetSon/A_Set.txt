Collection
 * 		|--List
 * 			有序(存储顺序和取出顺序一致),可重复
 * 		|--Set
 * 			无序(存储顺序和取出顺序不一致),唯一
 * 
 * HashSet：它不保证 set 的迭代顺序；特别是它不保证该顺序恒久不变。
 * 		注意：虽然Set集合的元素无序，但是，作为集合来说，它肯定有它自己的存储顺序，
 * 			  而你的顺序恰好和它的存储顺序一致，这代表不了有序，你可以多存储一些数据，就能看到效果。
 
 
	HashSet:存储字符串并遍历
 * 		问题：为什么存储字符串的时候，字符串内容相同的只存储了一个呢?
 * 		通过查看add方法的源码，我们知道这个方法底层依赖 两个方法：hashCode()和equals()。
			首先比较哈希值
 * 				如果相同，继续走，比较地址值或者走equals()
 * 				如果不同,就直接添加到集合中	
 * 		步骤即:
 * 		先看hashCode()值是否相同
 * 			相同:继续走equals()方法
 * 				返回true：	说明元素重复，就不添加
 * 				返回false：说明元素不重复，就添加到集合
 * 			不同：就直接把元素添加到集合
 * 		如果类没有重写这两个方法，默认使用的Object()。一般来说不会相同。
 * 		而String类重写了hashCode()和equals()方法，所以，它就可以把内容相同的字符串去掉。只留下一个。
 
 
	LinkedHashSet:底层数据结构由哈希表和链表组成。
 * 		哈希表保证元素的唯一性。
 * 		链表保证元素有序。(存储和取出是一致)
 
	TreeSet：能够对元素按照某种规则进行排序。
 * 		排序有两种方式
 * 			A:自然排序
				真正的比较是依赖于元素的compareTo()方法，而这个方法是定义在 Comparable里面的。
				所以，你要想重写该方法，就必须是先 Comparable接口。这个接口表示的就是自然排序。
 * 			B:比较器排序
				让集合的构造方法接收一个比较器接口的子类对象 Comparator
				
 * 
 * 		TreeSet集合的特点：排序和唯一