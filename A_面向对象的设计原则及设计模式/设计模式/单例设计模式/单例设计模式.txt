A:单例设计模式:
    单例模式就是要确保类在内存中只有一个对象，该实例必须自动创建，并且对外提供。
B:优点:
    在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象单例模式无疑可以提高系统的性能。
C:缺点:
没有抽象层，因此扩展很难。
    职责过重，在一定程序上违背了单一职责
	
	
    如何保证类在内存中只有一个对象呢?
  	    A：把构造方法私有
  	    B:在成员位置自己创建一个对象
 	    C:通过一个公共的方法提供访问
		
		
E:饿汉模式:类一加载就创建对象
	代码如下：
		
	构造类代码:
	
		public class Student{
		   //A:把构造方法私有化
		   private Student(){}
		   
		   //成员位置自己创建一个对象
		   // 静态方法只能访问静态成员变量，加静态
	       // 为了不让外界直接访问修改这个值，加private
		   private static Student s=new Student();
		   
		   // 提供公共的访问方式
		   // 为了保证外界能够直接使用该方法，加静态
		   private static Student getStudent(){
		      return s;
		   }
		}
	
	测试类代码:
	    public static void main(String[] ages){
		    Student s1=new Student();
		}


F:懒汉模式:用的时候，才去创建对象
    
	构造类代码:
	    public class Teacher{
		   //构造方法私有化
		   private Teacher(){
		   
		   }
		   
		   //成员位置创造一个对象
		   private synchronized static Teacher t=null;
		   
		   // 提供公共的访问方式
		   public static Teacher getTeacher(){
		      if(t!=null){
			     t=new Teacher();
			  }
			  
			  return t;
		   }
		}
		
	测试类代码:
	    public static void main(String[] ages){
	       Teacher t1 = Teacher.getTeacher();
	    }

    		
	