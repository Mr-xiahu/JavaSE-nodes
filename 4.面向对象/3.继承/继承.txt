A:继承概述：
		把多个类中相同的内容给提取出来定义到一个类中。
		
	(1):如何实现继承呢?	
		Java提供了关键字：extends
		
	(2):格式：
		class 子类名 extends 父类名 {}
		
	(3):好处：
		A:提高了代码的复用性
		B:提高了代码的维护性
		C:让类与类之间产生了关系，是多态的前提
	
	(4):类与类产生了关系，其实也是继承的一个弊端：
		类的耦合性增强了。
		
		开发的原则：低耦合，高内聚。
		耦合：类与类的关系
		内聚：就是自己完成某件事情的能力

B:Java中继承的特点：
		(1):Java只支持单继承，不支持多继承。
			有些语言是支持多继承，格式：extends 类1,类2,...
		(2):Java支持多层继承(继承体系)
		
		
C:继承的注意事项：
		(1):子类只能继承父类所有非私有的成员(成员方法和成员变量)
                   a.私有方法，子类不能继承
                   b.				   
		(2):子类不能继承父类的构造方法，但是可以通过super(马上讲)关键字去访问父类构造方法。
		(3):不要为了部分功能而去继承
		
			class A {
				public void show1(){}
				public void show2(){}
			}
			
			class B {
				public void show2(){}
				public void show3(){}
			}
			
			//我们发现B类中出现了和A类一样的show2()方法，所以，我们就用继承来体现
			class B extends A {
				public void show3(){}
			}
			这样其实不好，因为这样你不但有了show2(),还多了show1()。
			有可能show1()不是你想要的。
			
	那么，我们什么时候考虑使用继承呢?
		继承其实体现的是一种关系："is a"。
			Person
				Student
				Teacher
			水果
				苹果
				香蕉
				橘子
				
		采用假设法。
			如果有两个类A,B。只有他们符合A是B的一种，或者B是A的一种，就可以考虑使用继承。
			
			
D:类的组成：
		成员变量：
		构造方法：
		成员方法：
		
		
E:继承中成员变量的关系:
		A:子类中的成员变量和父类中的成员变量名称不一样，这个太简单。
		
		B:子类中的成员变量和父类中的成员变量名称一样，这个怎么玩呢?
			在子类方法中访问一个变量的查找顺序：
				a:在子类方法的局部范围找，有就使用
				b:在子类的成员范围找，有就使用
				c:在父类的成员范围找，有就使用
				d:如果还找不到，就报错。